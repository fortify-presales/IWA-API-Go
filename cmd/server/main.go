package main

import (
	"flag"
	"os"

	"github.com/rs/cors"
    _ "github.com/mattn/go-sqlite3"

	"github.com/fortify-presales/insecure-go-api/pkg/log"

	_ "github.com/fortify-presales/insecure-go-api/docs" // docs is generated by Swag CLI, you have to import it.
	"github.com/fortify-presales/insecure-go-api/internal/config"
	//"github.com/fortify-presales/insecure-go-api/internal/repository/inmem"
	"github.com/fortify-presales/insecure-go-api/internal/middleware"

	s "github.com/fortify-presales/insecure-go-api/internal/server"
	h "github.com/fortify-presales/insecure-go-api/internal/handler"
	r "github.com/fortify-presales/insecure-go-api/internal/repository" 

)

// Version indicates the current version of the application.
var Version = "1.0.0"

// Read configuration file path from command line argument, default is "./config/local.yml"
var flagConfig = flag.String("config", "./config/local.yml", "path to the config file")

// @title Insecure Go REST API
// @version 1.0
// @description This is an insecure Go REST API for use in OpenText Application Security demonstrations.
// @termsOfService https://github.com/fortify-presales/insecure-go-api

// @contact.name API Support
// @contact.url https://github.com/fortify-presales/insecure-go-api
// @contact.email do-not-reply@opentext.com

// @license.name GPL-3.0
// @license.url https://www.gnu.org/licenses/gpl-3.0.en.html

// @host localhost:8080
// @BasePath /api/v1

// @externalDocs.description  OpenAPI
// @externalDocs.url          https://swagger.io/resources/open-api/
func main() {
	// Parse command line flags
	flag.Parse()
	// Create root logger tagged with server version
	logger := log.New().With(nil, "version", Version)
	// Load application configurations
	cfg, err := config.Load(*flagConfig, logger)
	if err != nil {
		logger.Errorf("failed to load application configuration: %s", err)
		os.Exit(-1)
	}

   
	// Initialize storage
	//repo, err := inmem_repo.NewInmemoryRepository(logger) // with in-memory database
	//if err != nil {
	//	logger.Error("Error:", err)
	//	os.Exit(-1)
	//}
	//repo.Populate() // Populate the in-memory database

	repo := r.BuildRepository(logger, cfg)
	if repo == nil {
		logger.Errorf("Failed to initialize repository")
		os.Exit(-1)
	}
	// Initialize middleware stack
	stack := middleware.MiddlewareStack(
		middleware.RateLimiter(200),
		middleware.PanicRecovery(logger),
	)
	// Initialize CORS
	serverMux := cors.Default().Handler(h.BuildHandler(logger, cfg, repo))

	srv := s.RunServer(8080, stack(serverMux), logger)
	if srv == nil {	
		logger.Errorf("Server failed to start")
		os.Exit(-1)
	}

}
